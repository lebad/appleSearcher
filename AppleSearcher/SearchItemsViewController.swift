//
//  SearchItemsViewController.swift
//  AppleSearcher
//
//  Created by andrey on 31/01/16.
//  Copyright (c) 2016 AndreyLebedev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol SearchItemsViewControllerInput
{
  func displayFetchedItems(viewModel: SearchItems_FetchItems_ViewModel)
}

protocol SearchItemsViewControllerOutput
{
  func fetchItems(request: SearchItems_FetchItems_Request)
}

class SearchItemsViewController: UIViewController, SearchItemsViewControllerInput
{
  var output: SearchItemsViewControllerOutput!
  var router: SearchItemsRouter!
  
  var displayedItems: [SearchItems_FetchItems_ViewModel.DisplayedItem] = []
  
  // MARK: Interface
  @IBOutlet weak var collectionView: UICollectionView! {
    didSet {
      let flowLayout = UICollectionViewFlowLayout()
      flowLayout.minimumLineSpacing = 0.0
      collectionView.collectionViewLayout = flowLayout
      
      let nib = UINib(nibName: NSStringFromClass(DigitItemCollectionViewCell.self), bundle: nil)
      collectionView.registerNib(nib, forCellWithReuseIdentifier: NSStringFromClass(DigitItemCollectionViewCell.self))
    }
  }

  @IBOutlet weak var searchBar: UISearchBar! {
    didSet {
      searchBar.delegate = self;
    }
  }
  private var cellSizeCache = NSCache()
  
  // MARK: Object lifecycle
  
  override func awakeFromNib()
  {
    super.awakeFromNib()
    SearchItemsConfigurator.sharedInstance.configure(self)
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    doSomethingOnLoad()
  }
  
  override func viewWillLayoutSubviews() {
    super.viewWillLayoutSubviews()
    setEstimatedSizeIfNeeded()
  }
  
  func setEstimatedSizeIfNeeded() {
    if collectionView.collectionViewLayout.respondsToSelector("estimatedSize") {
      let flowLayout = collectionView.collectionViewLayout as! UICollectionViewFlowLayout
      flowLayout.estimatedItemSize = CGSizeMake(CGRectGetHeight(self.view.bounds), 100.0)
    }
  }
  
  // MARK: Event handling
  
  func doSomethingOnLoad()
  {
    // NOTE: Ask the Interactor to do some work
    
//    let request = SearchItemsRequest()
//    output.doSomething(request)
  }
  
  // MARK: Display logic
  
  func displayFetchedItems(viewModel: SearchItems_FetchItems_ViewModel) {
    displayedItems = viewModel.displayedItems
    collectionView.reloadData()
  }
}

// MARK: UICollectionViewDelegateFlowLayout

extension SearchItemsViewController: UICollectionViewDelegateFlowLayout {
  
}

extension SearchItemsViewController: UISearchBarDelegate {
  // MARK: UISearchBarDelegate
  
  func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {
    let request = SearchItems_FetchItems_Request(searchString: searchText)
    output.fetchItems(request)
  }
}

//MARK: UICollectionViewDelegate

extension SearchItemsViewController: UICollectionViewDelegate {
  
}

//MARK: UICollectionViewDataSource

extension SearchItemsViewController: UICollectionViewDataSource {
  
  func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {
    return 1
  }
  
  func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return displayedItems.count
  }
  
  func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
    let displayedItem = displayedItems[indexPath.row]
    let itemCell = collectionView.dequeueReusableCellWithReuseIdentifier(NSStringFromClass(DigitItemCollectionViewCell.self),
      forIndexPath: indexPath) as! DigitItemCollectionViewCell
        
    itemCell.nameLabel.text = displayedItem.name
    itemCell.descriptionLabel.text = displayedItem.description
    
    return itemCell
  }
}










