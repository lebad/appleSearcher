//
//  SearchItemsWorker.swift
//  AppleSearcher
//
//  Created by andrey on 31/01/16.
//  Copyright (c) 2016 AndreyLebedev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class SearchItemsWorker
{
  var itemsStore: SearchItemsStoreProtocol
  
  init(itemsStore: SearchItemsStoreProtocol) {
    self.itemsStore = itemsStore
  }
  
  
  func fetchItems(request: SearchItems_FetchItems_Request,
    completionHandler: (items: [Item], error: ItemsStoreError?) -> Void) {
      itemsStore.fetchItems(request) { (items, error) -> Void in
        if error == nil {
          completionHandler(items: items, error: nil)
        }
    }
  }
}

protocol SearchItemsStoreProtocol {
  func fetchItems(request: SearchItems_FetchItems_Request, completionHandler: (items: [Item], error: ItemsStoreError?) -> Void)
  func fetchItem(trackID: NSNumber?, completionHandler: (item: Item?, error: ItemsStoreError?) -> Void)
  func createItem(itemToCreate: Item, completionHandler: (error: ItemsStoreError?) -> Void)
}

typealias ItemsStoreFetchOrdersCompletionHandler = (result: ItemsStoreResult<[Item]>) -> Void

enum ItemsStoreResult<U>
{
  case Success(result: U)
  case Failure(error: ItemsStoreError)
}

// MARK: - Orders store CRUD operation errors

enum ItemsStoreError: Equatable, ErrorType
{
  case CannotFetch(String)
  case CannotCreate(String)
  case CannotUpdate(String)
  case CannotDelete(String)
}

func ==(lhs: ItemsStoreError, rhs: ItemsStoreError) -> Bool
{
  switch (lhs, rhs) {
  case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
  case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
  case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
  case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
  default: return false
  }
}



