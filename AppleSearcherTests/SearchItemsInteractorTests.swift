//
//  SearchItemsInteractorTests.swift
//  AppleSearcher
//
//  Created by andrey on 31/01/16.
//  Copyright (c) 2016 AndreyLebedev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import AppleSearcher
import XCTest

class SearchItemsInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: SearchItemsInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupSearchItemsInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupSearchItemsInteractor()
  {
    sut = SearchItemsInteractor()
  }
  
  // MARK: Test doubles
  
  class SearchItemsInteractorOutputSpy: SearchItemsInteractorOutput {
    // MARK: Method call expectations
    var presentFetchedItemsCalled = false
    
    func presentFetchedItems(response: SearchItems_FetchItems_Response) {
      presentFetchedItemsCalled = true
    }
  }
  
  class SearchItemsWorkerSpy: SearchItemsWorker {
    // MARK: Method call expectations
    var fetchItemsCalled = false
    
    var searchText: String!
    
    // MARK: Spied methods
    override func fetchItems(searchString: String, completionHandler: (items: [Item]) -> Void) {
      fetchItemsCalled = true
      searchText = searchString
      completionHandler(items: [])
    }
  }
  
  // MARK: Tests
  
  func testFetchItemShouldAskItemsWorkerToFetchItemsAndPresentToFormatResult()
  {
    // Given
    let searchItemsInteractorOutputSpy = SearchItemsInteractorOutputSpy()
    sut.output = searchItemsInteractorOutputSpy
    let searchItemsWorkerSpy = SearchItemsWorkerSpy(itemsStore: ItemsDataStore())
    sut.worker = searchItemsWorkerSpy
    
    let request = SearchItems_FetchItems_Request(searchString: "AAA")
    
    // When
    sut.fetchItems(request)
    
    // Then
    XCTAssertTrue(searchItemsWorkerSpy.fetchItemsCalled, "FetchItems() should ask itemsWorker to fetch items")
    XCTAssertTrue(searchItemsInteractorOutputSpy.presentFetchedItemsCalled, "FetchItems() should ask presenter to format items result")
  }
  
  func testShouldCarrySearchStringToWorker() {
    // Given
    let searchItemsInteractorOutputSpy = SearchItemsInteractorOutputSpy()
    sut.output = searchItemsInteractorOutputSpy
    let searchItemsWorkerSpy = SearchItemsWorkerSpy(itemsStore: ItemsDataStore())
    sut.worker = searchItemsWorkerSpy
    
    let request = SearchItems_FetchItems_Request(searchString: "AAA")
    
    // When
    sut.fetchItems(request)
    
    // Then
    XCTAssertEqual("AAA", searchItemsWorkerSpy.searchText, "Should carry search string to worker")
  }
}
